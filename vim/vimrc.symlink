" Preamble ---------------------------------------------------------------- {{{

let $BASH_ENV = "~/.bash_profile"
set shell=/bin/bash

filetype off

set rtp+=~/.vim/bundle/vundle/
" set runtimepath+=~/.vim/bundle/ultisnips
call vundle#rc()

filetype plugin indent on

set nocompatible

" }}}

let mapleader=" "
"
"
" Bundles ---------------------------------------------------------------- {{{

" Required for Vundle
Bundle 'gmarik/vundle'

" App extensions
Bundle 'mhinz/vim-startify'
Bundle 'tpope/vim-fugitive'
Bundle 'supasorn/vim-easymotion'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'majutsushi/tagbar'
Bundle 'Raimondi/delimitMate' " Auto-balancing of brackets etc.
Bundle 'SirVer/ultisnips'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'kien/ctrlp.vim'
Bundle 'myusuf3/numbers.vim.git'
" Bundle 'Valloric/YouCompleteMe'

" Tools
Bundle 'xolox/vim-misc'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'bufkill.vim'
" Bundle 'LaTeX-Box-Team/LaTeX-Box'
" Bundle 'Rename2'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tomtom/tcomment_vim'
Bundle 'chrisbra/NrrwRgn'
Bundle 'regedarek/ZoomWin'
Bundle 'YankRing.vim'
" Bundle 'kien/rainbow_parentheses.vim'
Bundle 'bkad/CamelCaseMotion'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'mattn/emmet-vim'
Bundle 'nelstrom/vim-visual-star-search'
" Bundle 'professorsloth/cmus-remote-vim'

" Color schemes
Bundle 'altercation/vim-colors-solarized'
" Bundle 'molokai'
" Bundle 'railscasts'
" Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
" Bundle 'Pychimp/vim-luna'
Bundle 'baskerville/bubblegum'

" Syntax"
Bundle 'scrooloose/syntastic' " Syntax checking hacks for vim
Bundle 'plasticboy/vim-markdown'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'statianzo/vim-jade'
Bundle 'vim-scripts/applescript.vim'

" JavaScript
" Bundle 'maksimr/vim-jsbeautify'
" Bundle 'einars/js-beautify'
" Bundle 'marijnh/tern_for_vim'

" CSS
" Bundle 'skammer/vim-css-color'
" Bundle 'vim-scripts/hexHighlight.vim'
" Bundle 'ap/vim-css-color'
" Bundle 'PickAColor.vim'

" Word processing modes
" Bundle 'jacekd/vim-iawriter'
" Bundle 'chrisbra/DistractFree'
" Bundle 'airblade/vim-gitgutter'

" }}}

" Basic options ----------------------------------------------------------- {{{

" Color scheme {{{

syntax on
set background=dark

" Solarized options
let g:solarized_visibility = "low"
let g:solarized_contrast = "high"
let g:solarized_termtrans = 1
let g:solarized_bold = 0
let g:solarized_hitrail = 0

" iawriter options
let g:fullscreen_colorscheme = "iawriter"
let g:fullscreen_font = "Cousine:h14"
let g:normal_colorscheme = "solarized"
let g:normal_font="Menlo:h12"

" tern options TODO: Move
let g:tern_show_argument_hints = 'no'
autocmd BufEnter * set completeopt-=preview

" Always show sign column
" autocmd BufEnter * sign define dummy
" autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

colorscheme bubblegum
highlight Cursor guifg=#333333 guibg=white

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" }}}

" General Configuration
set encoding=utf-8
set modelines=0
set number
set noerrorbells
set backspace=indent,eol,start
set showcmd
set showmode
set hidden
set nobackup
set splitright
set splitbelow
set autowrite
set autoread
set laststatus=2
set scrolloff=10
set sidescrolloff=10
set sidescroll=1
set fileformats=unix,dos,mac
set switchbuf=usetab,newtab
set clipboard=unnamed
set gcr=a:blinkon0
set visualbell
set nowrap
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default
set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set splitright splitbelow
set ttyfast
set lazyredraw
set laststatus=2
set showbreak=↪
set shiftround
set title
set linebreak
set linespace=0
set iskeyword+=\$

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault
set matchtime=3

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.

augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit

set wildignore+=*.luac                           " Lua byte code

set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code

set wildignore+=*.orig                           " Merge resolution files

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" Tabs, spaces, wrapping {{{
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" }}}

" Backups {{{

set undofile
set history=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}

" }}}
