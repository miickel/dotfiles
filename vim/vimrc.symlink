" Preamble ---------------------------------------------------------------- {{{

let $BASH_ENV = "~/.bash_profile"
set shell=/bin/bash

filetype off
filetype plugin indent on

set nocompatible

" }}}

" mapleader - fugly edition
map <space> <leader>

"
" Plugins ---------------------------------------------------------------- {{{

call plug#begin('~/.vim/plugged')

" App extensions
Plug 'amiorin/vim-project'
Plug 'tpope/vim-fugitive'
Plug 'Lokaltog/vim-easymotion'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'scrooloose/nerdtree'
Plug 'jistr/vim-nerdtree-tabs'
Plug 'majutsushi/tagbar'
Plug 'Raimondi/delimitMate'
Plug 'terryma/vim-multiple-cursors'
Plug 'terryma/vim-expand-region'
Plug 'myusuf3/numbers.vim'
Plug 'SirVer/ultisnips'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
Plug 'Shougo/vimproc.vim', { 'do': 'make -f make_mac.mak' }
Plug 't9md/vim-choosewin'
Plug 'rizzatti/funcoo.vim'
Plug 'Shougo/unite.vim'
Plug 'junegunn/vim-easy-align'
Plug 'fatih/vim-go'
Plug 'Shutnik/jshint2.vim'
Plug 'AndrewRadev/switch.vim'
Plug 'ctrlpvim/ctrlp.vim'
" Plug 'nixprime/cpsm', { 'do': './install.sh' }
Plug 'JazzCore/ctrlp-cmatcher', { 'do': './install.sh' }
" Plug 'FelikZ/ctrlp-py-matcher'
Plug 'junegunn/limelight.vim'
Plug 'rking/ag.vim'
Plug 'vim-scripts/Mark--Karkat'
Plug 'Shougo/vimfiler.vim'
Plug 'gorkunov/smartpairs.vim'
" Plug 'zefei/vim-colortuner'
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'SyntaxComplete'
Plug 'vim-utils/vim-interruptless'
Plug 'mattn/emmet-vim'
Plug 'gcmt/taboo.vim'

" Tools
Plug 'xolox/vim-misc'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'bufkill.vim'
Plug 'LaTeX-Box-Team/LaTeX-Box', { 'for': 'latex' }
Plug 'Rename2'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'tomtom/tcomment_vim'
Plug 'chrisbra/NrrwRgn'
Plug 'regedarek/ZoomWin'
Plug 'YankRing.vim'
Plug 'bkad/CamelCaseMotion'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'nelstrom/vim-visual-star-search'
Plug 'lfilho/cosco.vim'
Plug 'justinmk/vim-sneak'
Plug 'matze/vim-move'
Plug 'justinmk/vim-gtfo'
Plug 'wellle/targets.vim'
Plug 'tommcdo/vim-exchange'
Plug 'junegunn/goyo.vim'
Plug 'reedes/vim-wordy'
Plug 'heavenshell/vim-jsdoc', { 'for': 'javascript' }
Plug 'vim-scripts/argtextobj.vim'
Plug 'michaeljsmith/vim-indent-object'
Plug 'suan/vim-instant-markdown'

" Color schemes
Plug 'altercation/vim-colors-solarized'
Plug 'baskerville/bubblegum'
Plug 'tomasr/molokai'
Plug 'railscasts'
Plug 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plug 'Pychimp/vim-luna'
Plug 'flazz/vim-colorschemes'
Plug 'sjl/badwolf'
Plug 'miickel/base16-vim'
Plug 'whatyouhide/vim-gotham'
Plug 'daylerees/colour-schemes', { 'rtp': 'vim-themes/' }
Plug 'thinkpixellab/flatland', { 'rtp': 'Vim/colors' }
Plug 'NLKNguyen/papercolor-theme'

" Syntax
Plug 'scrooloose/syntastic'
Plug 'gabrielelana/vim-markdown', { 'for': 'markdown' }
" Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'othree/yajs.vim', { 'for': 'javascript' }
Plug 'mxw/vim-jsx', { 'for': 'jsx' }
Plug 'statianzo/vim-jade', { 'for': 'jade' }
Plug 'vim-scripts/applescript.vim', { 'for': 'applescript' }
Plug 'moll/vim-node', { 'for': 'javascript' }
Plug 'flowtype/vim-flow', { 'for': 'javascript', 'do': 'npm install -g flow-bin' }
Plug 'travitch/hasksyn', { 'for': 'haskell' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'wavded/vim-stylus'
Plug 'tpope/vim-git'
Plug 'mephux/vim-jsfmt'
Plug 'ruanyl/vim-fixmyjs'
Plug 'tfnico/vim-gradle'
Plug 'mustache/vim-mustache-handlebars'
Plug 'keith/swift.vim'

" JavaScript
Plug 'maksimr/vim-jsbeautify', { 'for': ['html', 'css', 'javascript'] }
Plug 'einars/js-beautify', { 'for': ['html', 'css', 'javascript'] }
Plug 'marijnh/tern_for_vim', { 'for': 'javascript' }

" CSS
Plug 'PickAColor.vim'

call plug#end()

" }}}

" Basic options ----------------------------------------------------------- {{{

" Color scheme {{{

syntax enable
set background=light

" Theme options
let g:solarized_visibility = "low"
let g:solarized_contrast = "high"
let g:solarized_termtrans = 1
let g:solarized_bold = 0
let g:solarized_hitrail = 0
let g:badwolf_darkgutter = 1
let g:molokai_original = 0

" Always show sign column
" autocmd BufEnter * sign define dummy
" autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

" colorscheme base16-ashes
" colorscheme Tomorrow-Night
" colorscheme bubblegum
" colorscheme base16-ocean
" colorscheme Tomorrow-Night-Blue
colorscheme PaperColor

" }}}

" General Configuration
set encoding=utf-8
set modelines=0
set number!
set noerrorbells
set backspace=indent,eol,start
set showcmd
set showmode
set hidden
set nobackup
set splitright
set splitbelow
set autowrite
set autoread
set laststatus=2
set scrolloff=10
set sidescrolloff=10
set sidescroll=1
set fileformats=unix,dos,mac
set switchbuf=usetab,newtab
set clipboard=unnamed
set gcr=a:blinkon0
set visualbell
set nowrap
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default
" set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set splitright splitbelow
set ttyfast
set lazyredraw
set laststatus=2
set showbreak=↪
set shiftround
set title
set linebreak
set iskeyword+=\$

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault
set matchtime=3
set shellcmdflag=-ic

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.

set cursorline
augroup cline
  au!
  au WinLeave,InsertEnter * set nocursorline
  au WinEnter,InsertLeave * set cursorline
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
  au!
  au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" Tabs, spaces, wrapping {{{
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" }}}

" Backups {{{

set undofile
set history=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

if !isdirectory(expand(&undodir))
  call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
  call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
  call mkdir(expand(&directory), "p")
endif

" }}}

" }}}


" MacVim specifics ----------------------------------------------------------- {{{
"
if has("gui_macvim")
  " set guifont=Sauce\ Code\ Powerline\ Light:h12
  " set guifont=Courier\ New\ for\ Powerline:h13
  " set guifont=Sauce\ Code\ Powerline\ Light:h12
  " set guifont=Source\ Code\ Pro\ Medium:h12
  set guifont=Sauce\ Code\ Powerline\ Light:h12
  set linespace=0
  set fu
  set clipboard+=unnamed
  set vb t_vb=
  set guioptions-=m  "no menu
  set guioptions-=T  "no toolbar
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r  "no scrollbar
  set guioptions-=R
  set showtabline=1

  " switch between tabs with cmd+1, cmd+2,..."
  map <D-1> 1gt
  map <D-2> 2gt
  map <D-3> 3gt
  map <D-4> 4gt
  map <D-5> 5gt
  map <D-6> 6gt
  map <D-7> 7gt
  map <D-8> 8gt
  map <D-9> 9gt

  " until we have default MacVim shortcuts this is the only way to use it in
  " insert mode
  imap <D-1> <esc>1gt
  imap <D-2> <esc>2gt
  imap <D-3> <esc>3gt
  imap <D-4> <esc>4gt
  imap <D-5> <esc>5gt
  imap <D-6> <esc>6gt
  imap <D-7> <esc>7gt
  imap <D-8> <esc>8gt
  imap <D-9> <esc>9gt

  " Select text with shift
  let macvim_hig_shift_movement = 1

endif

" }}}


" Folding ----------------------------------------------------------------- {{{

set foldlevelstart=0
nnoremap ö za
vnoremap ö za
nnoremap Ö zA
vnoremap Ö zA
nnoremap <leader>ö zMzv
vnoremap <leader>ö zMzv
nnoremap <leader>Ö zMzA
vnoremap <leader>Ö zMzA

" }}}


" Plugin options/shortcuts ----------------------------------------------------------- {{{

" CtrlP {{{

" Open ctrlp with cmd+p
let g:ctrlp_map = '<D-p>'

" Open goto symbol on current buffer
nmap <D-r> :MyCtrlPTag<cr>
imap <D-r> <esc>:MyCtrlPTag<cr>

" Open goto symbol on all buffers
nmap <D-R> :CtrlPBufTagAll<cr>
imap <D-R> <esc>:CtrlPBufTagAll<cr>

" Open goto anything
nmap <leader>p :CtrlP<cr>

" Open goto buffer
nmap <leader>P :CtrlPBuffer<cr>

let g:ctrlp_cmd = 'CtrlPMixed'        " search anything (in files, buffers and MRU files at the same time.)
let g:ctrlp_working_path_mode = 'r'  " search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 0   " show the match window at the top of the screen
let g:ctrlp_max_height = 10           " maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'      " jump to a file if it's open already
let g:ctrlp_use_caching = 1           " enable caching
let g:ctrlp_clear_cache_on_exit=0     " speed up by not removing clearing cache evertime
let g:ctrlp_mruf_max = 250            " number of recently opened files
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist)|(\.(swp|ico|git|svn))$'
" let g:ctrlp_match_func = { 'match': 'pymatcher#PyMatch' }
" let g:ctrlp_match_func = {'match': 'cpsm#CtrlPMatch'}
let g:ctrlp_match_func = {'match': 'matcher#cmatch'}
let g:ctrlp_user_command = 'ag %s -l --nocolor --nogroup -g ""'

func! MyPrtMappings()
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("t")': ['<c-t>'],
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>', 'ö'],
        \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>', 'ä'],
        \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>', 'å'],
        \ }
endfunc

func! MyCtrlPTag()
  let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
        \ 'AcceptSelection("t")': ['<c-t>'],
        \ }
  CtrlPBufTag
endfunc

let g:ctrlp_buffer_func = { 'exit': 'MyPrtMappings' }
com! MyCtrlPTag call MyCtrlPTag()

" }}}

" NERDTree {{{

nnoremap <Leader>o :VimFilerExplorer<CR>
" nnoremap <Leader>o :let NERDTreeQuitOnOpen = 1<bar>NERDTreeTabsToggle<CR>
" nnoremap <Leader>O :let NERDTreeQuitOnOpen = 0<bar>NERDTreeTabsToggle<CR>
nnoremap <Leader>R :let NERDTreeQuitOnOpen = 1<bar>NERDTree<CR><C-w>p:NERDTreeFind<CR>
nnoremap <Leader>r *``cgn
nnoremap <D-d> *``cgn
" nnoremap <Leader>R :let NERDTreeQuitOnOpen = 0<bar>NERDTree<CR><C-w>p:NERDTreeFind<CR>

" }}}

" GitGutter {{{

" nnoremap <leader>gg :GitGutterToggle<CR>
" nnoremap <leader>gh :GitGutterLineHighlightsToggle<CR>
" nnoremap <leader>gj :GitGutterNextHunk<CR>
" nnoremap <leader>gk :GitGutterPrevHunk<CR>

" }}}

" EasyMotion and Sneak {{{

nmap f <leader><leader>s

nmap s <Plug>SneakForward
nmap S <Plug>SneakBackward
let g:sneak#streak = 0
let g:sneak#s_next = 1

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>h <Plug>(easymotion-linebackward)

" let g:EasyMotion_leader_key = 'ö'
" nnoremap f H:call EasyMotion#Search(0,0)<CR>
" nnoremap F H:call EasyMotion#E(0,0)<CR>
let g:EasyMotion_keys = 'fjdkslionmhxcvgwera'
let g:EasyMotion_smartcase = 1

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" }}}

" Color picker {{{

noremap <leader>cr <esc>:PickRGB<cr>
noremap <leader>cc <esc>:PickRGB<cr>
noremap <leader>ch <esc>:PickHEX<cr>
noremap <leader>cs <esc>:PickHSL<cr>

" }}}

" YankRing {{{

nnoremap <silent> <leader>y :YRShow<cr>
let g:yankring_window_use_horiz = 0  " Use vertical split
let g:yankring_window_use_right = 1  " Open the window to the left

" }}}

" CamelCaseMotion {{{

" Camel case motion with W, B and E
map <S-W> <Plug>CamelCaseMotion_w
map <S-B> <Plug>CamelCaseMotion_b
map <S-E> <Plug>CamelCaseMotion_e

" }}}

" Git Fugitive {{{

nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gw :Gwrite<CR>
nmap <leader>gr :Gread<CR>
nmap <leader>ge :Gedit<CR>
nmap <leader>gv :Gvsplit<CR>
"nmap <leader>gs :Gsplit<CR>
nmap <leader>gd :Gdiff<CR>

" }}}

" LatexBox {{{

let g:LatexBox_latexmk_options = "-pvc -pdfps"

" }}}

" Powerline and Airline {{{

" Airline plugin
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#bufferline#enabled = 1
let g:airline_theme='lucius'

" }}}

" Startify {{{

let g:project_enable_welcome = 1
let g:project_use_nerdtree = 1

call project#rc("~/dev")

Project '~/Dropbox/Master Thesis/',               'Master_Thesis'
Project 'tools/dotfiles'
File    'tools/dotfiles/vim/vimrc.symlink',       'vimrc'
File    'tools/dotfiles/vim/gvimrc.symlink',      'gvimrc'
Project 'gocode/src/github.com/miickel',          'Go code'
Project 'gocode/src/github.com/miickel/cno',      'CNO Silk'
Project 'gocode/src/github.com/miickel/quantbox', 'Quantbox'
Project 'projects/quantbox-blog',                 'Quantbox Blog'
Project 'minsta',                                 'MINSTA'
Project 'myedge/myedge-launch',                   'uEdge Launch'
Project 'projects/byttebot',                      'Byttebot'
Project 'projects/quantbox',                      'QuantboxJS'
Project 'projects/realtime-chat',                 'Realtime Chat'
Project 'projects/trading-plan',                  'Trading Plan'
Project 'projects/trading-diary',                 'Trading Diary'
Project 'projects/diskret',                       'Diskret_Matematik'
Project 'projects/asthena.jazz'
Project 'projects/touchtype.ninja'
Project 'projects/koding-project'
Project 'projects/gauges'
Project 'remente/remente-blog',                   'Remente Blog'
Project 'remente/remente-ios',                    'Remente iOS'
Project 'remente/remente-services',               'Remente Services'
Project 'remente/remente-serverless',             'Remente Serverless'
Project 'remente/remente-api',                    'Remente-API'
Project 'remente/remente-admin',                  'Remente-Admin'
Project 'remente/remente-app',                    'Remente-app'
Project 'remente/remente-email-templates',        'Remente-email-templates'
Project 'remente/remente-web',                    'Remente-web'
Project 'remente/remente-webapp',                 'Remente Web App'
Project 'remente/remente-webapp-styleguide',      'Remente Web App Styleguide'
Project 'remente/remente-homepage',               'Remente-homepage'

" }}}

" Cosco comma/semicolon {{{

autocmd FileType javascript,css,YOUR_LANG nmap <silent> ,. :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css,YOUR_LANG inoremap <silent> ,. <ESC>:call cosco#commaOrSemiColon()"<CR>a

" }}}

" Ctrl Space {{{
let g:airline_exclude_preview = 1
let g:ctrlspace_use_tabline = 1
hi CtrlSpaceSelected term=reverse ctermfg=187  ctermbg=23  cterm=bold
hi CtrlSpaceNormal   term=NONE    ctermfg=244  ctermbg=232 cterm=NONE
hi CtrlSpaceFound    ctermfg=220  ctermbg=NONE cterm=bold
" }}}

" Goyo distraction-free editing {{{
nnoremap <Leader>' :Goyo<CR>

let g:goyo_linenr=1
let g:goyo_margin_top=2
let g:goyo_margin_bottom=2

function! s:goyo_before()
  exec ':NumbersToggle'
  exec ':NumbersOnOff'
  set wrap
  set linebreak
  set nolist
  set textwidth=0
  set wrapmargin=0
  let &showbreak=repeat(' ', 6)
  set nocursorline
  augroup cline
    au!
    au WinLeave,InsertEnter *
    au WinEnter,InsertLeave *
  augroup END
  exec ':redraw!'
endfunction

function! s:goyo_after()
  exec ':NumbersToggle'
  exec ':NumbersOnOff'
  hi vertsplit guifg=bg guibg=bg
  hi NonText guifg=bg guibg=bg
  hi SignColumn guifg=bg guibg=bg
  set cursorline
  augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
  augroup END
endfunction

let g:goyo_callbacks = [function('s:goyo_before'), function('s:goyo_after')]
" }}}

" JSDoc {{{
let g:jsdoc_default_mapping = 0
nnoremap <silent> <leader>/ :JsDoc<CR>
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

" Unite {{{
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file,file/new,buffer,file_rec,line', 'matchers', 'matcher_fuzzy')
nnoremap <D-e> :<C-u>Unite -buffer-name=search -start-insert line<cr>
" }}}

" Easy Align {{{

" Start interactive EasyAlign in visual mode (e.g. vip<Enter>)
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. <Leader>aip)
nmap <Leader>a <Plug>(EasyAlign)

" }}}

" TernJS {{{
let g:tern_show_argument_hints = 'no'
autocmd BufEnter * set completeopt-=preview
nnoremap <silent> <leader>cc :TernRename<CR>
nnoremap <silent> <leader>. :TernDef<CR>
" }}}

" switch.vim {{{
nnoremap <silent> § :Switch<cr>
" }}}

" GoldenView {{{
let g:goldenview__enable_default_mapping = 0
nmap <silent> <C-w><C-w>  <Plug>GoldenViewSplit

" 2. quickly switch current window with the main pane
" and toggle back
" nmap <silent> <C-w><C-m>   <Plug>GoldenViewSwitchMain
nmap <silent> å   <Plug>GoldenViewSwitchToggle

" 3. jump to next and previous window
" nmap <silent> <C-N>  <Plug>GoldenViewNext
" nmap <silent> <C-P>  <Plug>GoldenViewPrevious
" }}}

" Limelight {{{
autocmd User GoyoEnter Limelight
autocmd User GoyoLeave Limelight!
" }}}

" Ag {{{
nnoremap <leader>ag :Ag
" }}}

" Choosewin {{{
let g:choosewin_overlay_enable = 1
nmap  -  <Plug>(choosewin)
nmap  <leader>sw <Plug>(choosewin-swap)
" }}}

" Fixmyjs {{{
map <Leader>f :execute ":w !fixmyjs " . expand("%")<CR>:edit<CR>
let g:js_fmt_autosave = 0
let g:js_fmt_fail_silently = 1
let g:js_fmt_command = "jsfmt"
" }}}

" GTFO {{{
let g:gtfo#terminals = { 'mac' : 'iterm' }
" }}}

" Markdown {{{
let g:markdown_mapping_switch_status = '<Leader>s'
let g:markdown_enable_spell_checking = 0
" }}}

" Flow {{{
let g:flow#autoclose = 1
let g:flow#errjump = 1
" }}}

" Taboo {{{
let g:taboo_tab_format = '  %f [%W%m]  '
map <Leader>, :TabooRename
" }}}

" PLUGIN {{{

" }}}

" }}}


" General keyboard shortcuts ----------------------------------------------------------- {{{

" Movement {{{

" Better j/k movement in wrapped lines
nmap j gj
nmap k gk

" }}}

" Formatting {{{

" Change indent continuously
vmap < <gv
vmap > >gv

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split line (sister to [J]oin lines)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap <S-K> i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Shift-tabs
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i

let g:move_key_modifier = 'D'

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Retab document
nmap <leader>t :retab!<CR>

" }}}

" Display options {{{

" Unfuck my screen
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>

" Toggle [i]nvisible characters
nnoremap <leader>i :set list!<cr>

" }}}

" Splits and buffers {{{

" Next prev buffer
nnoremap <silent> <leader>k :call MyNext()<CR>
nnoremap <silent> <leader>j :call MyPrev()<CR>

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" MacVim: toggle windows
nmap <d-i> :maca _cycleWindows:<CR>
nmap <d-u> :maca _cycleWindowsBackwards:<CR>

" Maximize current buffer window
nnoremap <silent> <leader>M :ZoomWin<CR>

" Delete buffer
nmap <silent> <leader>w :BD<CR>
nmap <silent> <leader>W :BD!<CR>
nmap <silent> <leader>q :bufdo bdelete<CR>

" Switch between last two buffers
nnoremap <leader><tab> <c-^>

" }}}

" Movement and Search {{{

" Don't move on *
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" gi already moves to "last place you exited insert mode", so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" }}}

" Type {{{
" }}}

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

" open file under cursor, create if necessary
nnoremap gF :view <cfile><cr>

" Source
vnoremap <leader>S y:execute @@<cr>:echo 'Sourced selection.'<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>:echo 'Sourced line.'<cr>

" Redo last Ex command with bang
nnoremap <leader>! q:k0ea!<ESC>

" Write all changed buffers
nmap <leader>ss :wa<CR>

" Add a semi-colon at the end of the line
inoremap <space>, <C-o>A;<esc>

" Remove search highlighting
nnoremap <esc><esc> :set hlsearch!<CR>

" Reload vimrc
map <F5> :source $MYVIMRC<CR>:echoe "Vimrc Reloaded"<CR>

" Escape remapping
vno v <esc>

" Toggle tagbar
nmap <leader>d :TagbarToggle<CR>

" Edit current folder
nnoremap <Leader>n :e <C-R>=expand('%:p:h') . '/'<CR>

" More edit commands
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Jump list
" nnoremap <leader>, :jump<CR>

" Make D behave
nnoremap D d$


" Keyboard shortcuts with dependencies {{{

" Word processing
nnoremap <leader>W :call WordProcessingToggle()<CR>

" Formatting for lazy people
" autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType javascript noremap <buffer> <c-f> mq:%!js-beautify -s 2 -j -q -f -<CR>'q<esc>:delmarks q<CR>zz<esc>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" Stop completion with enter, in addition to default ctrl+y
imap <expr> <CR> pumvisible() ? "\<c-y>" : "<Plug>delimitMateCR"

" }}}


" }}}


if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
  set t_Co=256
endif

autocmd BufNewFile,BufRead *.jade set filetype=jade
autocmd BufNewFile,BufRead *._js setfiletype javascript

let g:ycm_autoclose_preview_window_after_completion = 1

let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

map <F11> :mksession! ~/vim_session <cr>
map <F12> :source ~/vim_session <cr>

"create line break when pressing enter
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

let g:multi_cursor_use_default_mapping = 0
" let g:multi_cursor_next_key = '<D-d>'
" let g:multi_cursor_prev_key = '<D-u>'
" let g:multi_cursor_skip_key = '<D-k>' "until we got multiple keys support
" let g:multi_cursor_quit_key = '<Esc>'

" MyNext() and MyPrev(): Movement between tabs OR buffers
function! MyNext()
    if exists( '*tabpagenr' ) && tabpagenr('$') != 1
        " Tab support && tabs open
        normal gt
    else
        " No tab support, or no tabs open
        execute ":bnext"
    endif
endfunction
function! MyPrev()
    if exists( '*tabpagenr' ) && tabpagenr('$') != '1'
        " Tab support && tabs open
        normal gT
    else
        " No tab support, or no tabs open
        execute ":bprev"
    endif
endfunction

nnoremap <leader>´ :call ReverseBackground()<CR>
function! ReverseBackground()
    if (g:colors_name == "PaperColor")
        colorscheme Tomorrow-Night-Blue
        set background=dark
    else
        colorscheme PaperColor
        set background=light
    endif
    hi vertsplit guifg=bg guibg=bg
    hi NonText guifg=bg guibg=bg
    hi SignColumn guifg=bg guibg=bg
    exec ':redraw!'
endfunction

" WordProcessingToggle() {{{
function! WordProcessingToggle()
    if !exists('b:wordprocessing') || b:wordprocessing
        let b:wordprocessing = 'true'
        setlocal lbr ai
        setlocal tw=80
        setlocal fo-=cq fo+=tan1
        echo "Word processing mode enabled."
    else
        let b:wordprocessing = 'false'
        setlocal nolbr noai
        setlocal fo+=cq fo-=tan1
        echo "Word processing mode disabled."
    endif
endfunction

let g:nerdtree_tabs_open_on_gui_startup = 0
let g:NERDTreeWinSize = 40
let NERDTreeShowBookmarks=0
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1

function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

set numberwidth=4
autocmd FileType nerdtree setlocal norelativenumber
autocmd FileType taglist setlocal norelativenumber
autocmd FileType tagbar setlocal norelativenumber
autocmd FileType tagbar setlocal nonumber

" Tagbar settings
let g:tagbar_compact = 1

" Conque settings
let g:ConqueTerm_Color = 1

" Clean up GUI
hi vertsplit guifg=bg guibg=bg
hi NonText guifg=bg guibg=bg
hi SignColumn guifg=bg guibg=bg

" Trim trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType javascript,coffee,jade,latex,tex,c,cpp,java,ruby,python,haskell autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
au BufNewFile,BufRead *.ejs set filetype=html
filetype off
filetype on

" Expand Region {{{
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" }}}

