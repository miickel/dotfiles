" Preamble ---------------------------------------------------------------- {{{

let $BASH_ENV = "~/.bash_profile"
set shell=/bin/bash

filetype off

set rtp+=~/.vim/bundle/vundle/
set runtimepath+=~/.vim/bundle/ultisnips
call vundle#rc()

filetype plugin indent on

set nocompatible

" }}}

" mapleader - fugly edition
map <space> <leader>

"
" Bundles ---------------------------------------------------------------- {{{

" Required for Vundle
Bundle 'gmarik/vundle'

" App extensions
Bundle 'amiorin/vim-project'
Bundle 'tpope/vim-fugitive'
" Bundle 'supasorn/vim-easymotion'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'bling/vim-airline'
Bundle 'scrooloose/nerdtree'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'majutsushi/tagbar'
" Bundle 'bling/vim-bufferline'
Bundle 'Raimondi/delimitMate'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'terryma/vim-expand-region'
Bundle 'kien/ctrlp.vim'
Bundle 'myusuf3/numbers.vim.git'
" Bundle 'airblade/vim-gitgutter'
Bundle 'SirVer/ultisnips'
Bundle 'Valloric/YouCompleteMe'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'
Bundle 'szw/vim-ctrlspace'
Bundle 'Shougo/unite.vim'

" Tools
Bundle 'xolox/vim-misc'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'bufkill.vim'
Bundle 'LaTeX-Box-Team/LaTeX-Box'
Bundle 'Rename2'
Bundle 'tpope/vim-unimpaired'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-repeat'
Bundle 'tomtom/tcomment_vim'
Bundle 'chrisbra/NrrwRgn'
Bundle 'regedarek/ZoomWin'
Bundle 'YankRing.vim'
Bundle 'bkad/CamelCaseMotion'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'mattn/emmet-vim'
Bundle 'nelstrom/vim-visual-star-search'
Bundle 'twe4ked/vim-colorscheme-switcher'
Bundle 'lfilho/cosco.vim'
Bundle 'justinmk/vim-sneak'
Bundle 'matze/vim-move'
Bundle 'justinmk/vim-gtfo'
Bundle 'wellle/targets.vim'
Bundle 'tommcdo/vim-exchange'
Bundle 'junegunn/goyo.vim'
Bundle 'reedes/vim-wordy'
Bundle 'heavenshell/vim-jsdoc'
" Bundle 'kien/rainbow_parentheses.vim'
" Bundle 'professorsloth/cmus-remote-vim'

" Color schemes
Bundle 'altercation/vim-colors-solarized'
Bundle 'baskerville/bubblegum'
Bundle 'tomasr/molokai'
Bundle 'railscasts'
Bundle 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Bundle 'Pychimp/vim-luna'
Bundle 'flazz/vim-colorschemes'
Bundle 'sjl/badwolf'
Bundle 'chriskempson/base16-vim'
Bundle "daylerees/colour-schemes", { "rtp": "vim-themes/" }

" Syntax"
Bundle 'scrooloose/syntastic'
Bundle 'gabrielelana/vim-markdown'
Bundle "pangloss/vim-javascript"
Bundle 'statianzo/vim-jade'
Bundle 'vim-scripts/applescript.vim'
Bundle 'moll/vim-node'
Bundle 'travitch/hasksyn'
" Bundle 'ChrisYip/Better-CSS-Syntax-for-Vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'kchmck/vim-coffee-script'

" JavaScript
Bundle 'maksimr/vim-jsbeautify'
Bundle 'einars/js-beautify'
Bundle 'marijnh/tern_for_vim'

" CSS
Bundle 'PickAColor.vim'
" Bundle 'skammer/vim-css-color'
" Bundle 'vim-scripts/hexHighlight.vim'
" Bundle 'ap/vim-css-color'

" Word processing modes
Bundle 'jacekd/vim-iawriter'

" }}}

" Basic options ----------------------------------------------------------- {{{

" Color scheme {{{


syntax enable
set background=dark

" Solarized options
let g:solarized_visibility = "low"
let g:solarized_contrast = "high"
let g:solarized_termtrans = 1
let g:solarized_bold = 0
let g:solarized_hitrail = 0

" iawriter options
let g:fullscreen_colorscheme = "iawriter"
let g:fullscreen_font = "Cousine:h14"
let g:normal_colorscheme = "solarized"
let g:normal_font="Menlo:h12"

" tern options TODO: Move
let g:tern_show_argument_hints = 'no'
autocmd BufEnter * set completeopt-=preview

" Always show sign column
" autocmd BufEnter * sign define dummy
" autocmd BufEnter * execute 'sign place 9999 line=1 name=dummy buffer=' . bufnr('')

let g:badwolf_darkgutter = 1
let g:molokai_original = 0

colorscheme base16-ocean

" }}}

" General Configuration
set encoding=utf-8
set modelines=0
set number!
set noerrorbells
set backspace=indent,eol,start
set showcmd
set showmode
set hidden
set nobackup
set splitright
set splitbelow
set autowrite
set autoread
set laststatus=2
set scrolloff=10
set sidescrolloff=10
set sidescroll=1
set fileformats=unix,dos,mac
set switchbuf=usetab,newtab
set clipboard=unnamed
set gcr=a:blinkon0
set visualbell
set nowrap
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default
" set list
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮
set splitright splitbelow
set ttyfast
set lazyredraw
set laststatus=2
set showbreak=↪
set shiftround
set title
set linebreak
set iskeyword+=\$

set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault
set matchtime=3

" Don't try to highlight lines longer than 800 characters.
set synmaxcol=800

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Cursorline {{{
" Only show cursorline in the current window and in normal mode.

set cursorline
augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
augroup END

" }}}

" Wildmenu completion {{{

set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX bullshit
set wildignore+=*.luac                           " Lua byte code
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files

" }}}

" Line Return {{{

" Make sure Vim returns to the same line when you reopen a file.
" Thanks, Amit
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END

" }}}

" Tabs, spaces, wrapping {{{
set autoindent
set smartindent
set smarttab
set shiftwidth=2
set softtabstop=2
set tabstop=2
set expandtab

" }}}

" Backups {{{

set undofile
set history=1000
set undoreload=10000
set backup                        " enable backups
set noswapfile                    " it's 2013, Vim.

set undodir=~/.vim/tmp/undo//     " undo files
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files

if !isdirectory(expand(&undodir))
    call mkdir(expand(&undodir), "p")
endif
if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif

" }}}

" }}}


" MacVim specifics ----------------------------------------------------------- {{{
"
if has("gui_macvim")
  set guifont=Sauce\ Code\ Powerline\ Light:h12
  set guifont=Courier\ New\ for\ Powerline:h13
  set guifont=Sauce\ Code\ Powerline\ Light:h12
  set guifont=Source\ Code\ Pro\ Medium:h12
  set guifont=Sauce\ Code\ Powerline:h12
  set linespace=0
  set fu
  set clipboard+=unnamed
  set vb t_vb=
  set guioptions-=m  "no menu
  set guioptions-=T  "no toolbar
  set guioptions-=l
  set guioptions-=L
  set guioptions-=r  "no scrollbar
  set guioptions-=R
  set showtabline=1

  " This mapping makes Ctrl-Tab switch between tabs.
  " Ctrl-Shift-Tab goes the other way.
  noremap <C-Tab> :tabnext<CR>
  noremap <C-S-Tab> :tabprev<CR>

  " switch between tabs with cmd+1, cmd+2,..."
  map <D-1> 1gt
  map <D-2> 2gt
  map <D-3> 3gt
  map <D-4> 4gt
  map <D-5> 5gt
  map <D-6> 6gt
  map <D-7> 7gt
  map <D-8> 8gt
  map <D-9> 9gt

  " until we have default MacVim shortcuts this is the only way to use it in
  " insert mode
  imap <D-1> <esc>1gt
  imap <D-2> <esc>2gt
  imap <D-3> <esc>3gt
  imap <D-4> <esc>4gt
  imap <D-5> <esc>5gt
  imap <D-6> <esc>6gt
  imap <D-7> <esc>7gt
  imap <D-8> <esc>8gt
  imap <D-9> <esc>9gt

  " Select text with shift
  let macvim_hig_shift_movement = 1

endif

" }}}


" Folding ----------------------------------------------------------------- {{{

set foldlevelstart=0
nnoremap ö za
vnoremap ö za
nnoremap Ö zA
vnoremap Ö zA
nnoremap <leader>ö zMzv
vnoremap <leader>ö zMzv
nnoremap <leader>Ö zMzA
vnoremap <leader>Ö zMzA

" }}}


" Plugin options/shortcuts ----------------------------------------------------------- {{{

" CtrlP {{{

" Open ctrlp with cmd+p
let g:ctrlp_map = '<D-p>'

" Open goto symbol on current buffer
nmap <D-r> :MyCtrlPTag<cr>
imap <D-r> <esc>:MyCtrlPTag<cr>

" Open goto symbol on all buffers
nmap <D-R> :CtrlPBufTagAll<cr>
imap <D-R> <esc>:CtrlPBufTagAll<cr>

" Open goto anything
nmap <leader>p :CtrlP<cr>

" Open goto buffer
nmap <leader>P :CtrlPBuffer<cr>

let g:ctrlp_cmd = 'CtrlPMixed'        " search anything (in files, buffers and MRU files at the same time.)
let g:ctrlp_working_path_mode = 'ra'  " search for nearest ancestor like .git, .hg, and the directory of the current file
let g:ctrlp_match_window_bottom = 0   " show the match window at the top of the screen
let g:ctrlp_max_height = 10           " maxiumum height of match window
let g:ctrlp_switch_buffer = 'et'      " jump to a file if it's open already
let g:ctrlp_use_caching = 1           " enable caching
let g:ctrlp_clear_cache_on_exit=0     " speed up by not removing clearing cache evertime
let g:ctrlp_mruf_max = 250            " number of recently opened files
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

func! MyPrtMappings()
    let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("t")': ['<c-t>'],
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>', 'ö'],
        \ 'AcceptSelection("v")': ['<c-v>', '<RightMouse>', 'ä'],
        \ 'AcceptSelection("h")': ['<c-x>', '<c-cr>', '<c-s>', 'å'],
        \ }
endfunc

func! MyCtrlPTag()
    let g:ctrlp_prompt_mappings = {
        \ 'AcceptSelection("e")': ['<cr>', '<2-LeftMouse>'],
        \ 'AcceptSelection("t")': ['<c-t>'],
        \ }
    CtrlPBufTag
endfunc

let g:ctrlp_buffer_func = { 'exit': 'MyPrtMappings' }
com! MyCtrlPTag call MyCtrlPTag()

" }}}

" NERDTree {{{

nnoremap <Leader>o :let NERDTreeQuitOnOpen = 1<bar>NERDTreeTabsToggle<CR>
nnoremap <Leader>O :let NERDTreeQuitOnOpen = 0<bar>NERDTreeTabsToggle<CR>
nnoremap <Leader>r :let NERDTreeQuitOnOpen = 1<bar>NERDTree<CR><C-w>p:NERDTreeFind<CR>
nnoremap <Leader>R :let NERDTreeQuitOnOpen = 0<bar>NERDTree<CR><C-w>p:NERDTreeFind<CR>

" }}}

" GitGutter {{{

nnoremap <leader>gg :GitGutterToggle<CR>
nnoremap <leader>gh :GitGutterLineHighlightsToggle<CR>
nnoremap <leader>gj :GitGutterNextHunk<CR>
nnoremap <leader>gk :GitGutterPrevHunk<CR>

" }}}

" EasyMotion and Sneak {{{

nmap f <leader><leader>s

nmap s <Plug>SneakForward
nmap S <Plug>SneakBackward
let g:sneak#streak = 0
let g:sneak#s_next = 1

map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>h <Plug>(easymotion-linebackward)

" let g:EasyMotion_leader_key = 'ö'
" nnoremap f H:call EasyMotion#Search(0,0)<CR>
" nnoremap F H:call EasyMotion#E(0,0)<CR>
let g:EasyMotion_keys = 'fjdkslionmhxcvgwera'
let g:EasyMotion_smartcase = 1

hi link EasyMotionTarget ErrorMsg
hi link EasyMotionShade  Comment

" }}}

" Color picker {{{

noremap <leader>cr <esc>:PickRGB<cr>
noremap <leader>cc <esc>:PickRGB<cr>
noremap <leader>ch <esc>:PickHEX<cr>
noremap <leader>cs <esc>:PickHSL<cr>

" }}}

" YankRing {{{

nnoremap <silent> <leader>y :YRShow<cr>
let g:yankring_window_use_horiz = 0  " Use vertical split
let g:yankring_window_use_right = 0  " Open the window to the left

" }}}

" CamelCaseMotion {{{

" Camel case motion with W, B and E
map <S-W> <Plug>CamelCaseMotion_w
map <S-B> <Plug>CamelCaseMotion_b
map <S-E> <Plug>CamelCaseMotion_e

" }}}

" Git Fugitive {{{

nmap <leader>gs :Gstatus<CR>
nmap <leader>gc :Gcommit<CR>
nmap <leader>gw :Gwrite<CR>
nmap <leader>gr :Gread<CR>
nmap <leader>ge :Gedit<CR>
nmap <leader>gv :Gvsplit<CR>
"nmap <leader>gs :Gsplit<CR>
nmap <leader>gd :Gdiff<CR>

" }}}

" LatexBox {{{

let g:LatexBox_latexmk_options = "-pvc -pdfps"

" }}}

" Powerline and Airline {{{

" Powerline plugin
let g:Powerline_theme='skwp'
let g:Powerline_colorscheme='skwp'
let g:Powerline_symbols = 'fancy'

" Airline plugin
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = ''
let g:airline#extensions#bufferline#enabled = 1
let g:airline_theme='base16'

" }}}

" Startify {{{

let g:project_enable_welcome = 1
let g:project_use_nerdtree = 1

call project#rc("~/dev")

Project   'scratch'

Project   '~/Dropbox/Master Thesis/',           'Master Thesis'

Project   'tools/dotfiles'
File      'tools/dotfiles/vim/vimrc.symlink',   'vimrc'
File      'tools/dotfiles/vim/gvimrc.symlink',  'gvimrc'

Project   'projects/asthena.jazz'
Project   'projects/touchtype-ninja'
Project   'projects/remente-2.0'
Project   'projects/ddie'
Project   'projects/mickel.me'

Project   'projects/gulp-angular-templatecache'


" let g:startify_custom_header =
" \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']
" autocmd FileType startify setlocal nocursorline
" let g:startify_custom_header = [
"             \ '     Asthena - www.asthena.com ',
"             \ '',
"             \ '',
"             \ ]

" }}}

" Bufferline {{{

let g:bufferline_echo = 0
let g:bufferline_active_buffer_left = ''
let g:bufferline_active_buffer_right = '|'
let g:bufferline_modified = '+'
let g:bufferline_show_bufnr = 0
let g:bufferline_fname_mod = ':t'
let g:bufferline_rotate = 0

" }}}

" Cosco comma/semicolon {{{

autocmd FileType javascript,css,YOUR_LANG nmap <silent> ,. :call cosco#commaOrSemiColon()<CR>
autocmd FileType javascript,css,YOUR_LANG inoremap <silent> ,. <ESC>:call cosco#commaOrSemiColon()"<CR>a

" }}}

" Ctrl Space {{{
let g:airline_exclude_preview = 1
let g:ctrlspace_use_tabline = 1
hi CtrlSpaceSelected term=reverse ctermfg=187  ctermbg=23  cterm=bold
hi CtrlSpaceNormal   term=NONE    ctermfg=244  ctermbg=232 cterm=NONE
hi CtrlSpaceFound    ctermfg=220  ctermbg=NONE cterm=bold
" }}}

" Expand Region {{{
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)
" }}}

" Goyo distraction-free editing {{{
nnoremap <Leader>' :Goyo<CR>

let g:goyo_linenr=1
let g:goyo_margin_top=2
let g:goyo_margin_bottom=2

function! s:goyo_before()
  exec ':NumbersToggle'
  exec ':NumbersOnOff'
  set wrap
  set linebreak
  set nolist
  set textwidth=0
  set wrapmargin=0
  let &showbreak=repeat(' ', 6)
  set nocursorline
  augroup cline
    au!
    au WinLeave,InsertEnter *
    au WinEnter,InsertLeave *
  augroup END
  exec ':redraw!'
endfunction

function! s:goyo_after()
  exec ':NumbersToggle'
  exec ':NumbersOnOff'
  hi vertsplit guifg=bg guibg=bg
  hi NonText guifg=bg guibg=bg
  set cursorline
  augroup cline
    au!
    au WinLeave,InsertEnter * set nocursorline
    au WinEnter,InsertLeave * set cursorline
  augroup END
endfunction

let g:goyo_callbacks = [function('s:goyo_before'), function('s:goyo_after')]
" }}}

" JSDoc {{{
let g:jsdoc_default_mapping = 0
nnoremap <silent> <leader>/ :JsDoc<CR>
" }}}

" UltiSnips {{{
let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

" Plugin {{{
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#filters#sorter_default#use(['sorter_rank'])
call unite#custom#source('file,file/new,buffer,file_rec,line', 'matchers', 'matcher_fuzzy')
nnoremap <D-e> :<C-u>Unite -buffer-name=search -start-insert line<cr>
" }}}

" Plugin {{{
" }}}

" }}}


" General keyboard shortcuts ----------------------------------------------------------- {{{

" Movement {{{

" Better j/k movement in wrapped lines
nmap j gj
nmap k gk

" }}}

" Formatting {{{

" Indent lines with cmd+[ and cmd+]
nmap <D-]> >>
nmap <D-[> <<
vmap <D-[> <gv
vmap <D-]> >gv

" Change indent continuously
vmap < <gv
vmap > >gv

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Split line (sister to [J]oin lines)
" The normal use of S is covered by cc, so don't worry about shadowing it.
nnoremap <S-K> i<cr><esc>^mwgk:silent! s/\v +$//<cr>:noh<cr>`w

" Shift-tabs
nmap <S-Tab> <<
imap <S-Tab> <Esc><<i

" Bubble single lines
" nmap <D-k> [e
" nmap <D-j> ]e
" Bubble multiple lines
" vmap <D-k> [egv
" vmap <D-j> ]egv
let g:move_key_modifier = 'D'

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Retab document
nmap <leader>t :retab!<CR>

" }}}

" Display options {{{

" Unfuck my screen
nnoremap U :syntax sync fromstart<cr>:redraw!<cr>

" Toggle [i]nvisible characters
nnoremap <leader>i :set list!<cr>

" }}}

" Splits and buffers {{{

" Next prev buffer
nnoremap <silent> <leader>k :call MyNext()<CR>
nnoremap <silent> <leader>j :call MyPrev()<CR>

" Use ctrl-[hjkl] to select the active split!
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Maximize current buffer window
nnoremap <silent> <leader>mm :ZoomWin<CR>

" Delete buffer
nmap <leader>w :BD<CR>

" Switch between last two buffers
nnoremap <leader><tab> <c-^>

" }}}

" Movement and Search {{{

" Don't move on *
nnoremap * *<c-o>

" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz
nnoremap <c-o> <c-o>zz

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Heresy
inoremap <c-a> <esc>I
inoremap <c-e> <esc>A
cnoremap <c-a> <home>
cnoremap <c-e> <end>

" gi already moves to "last place you exited insert mode", so we'll map gI to
" something similar: move to last change
nnoremap gI `.

" }}}

" Type {{{
" }}}

" Fix linewise visual selection of various text objects
nnoremap VV V
nnoremap Vit vitVkoj
nnoremap Vat vatV
nnoremap Vab vabV
nnoremap VaB vaBV

" open file under cursor, create if necessary
nnoremap gF :view <cfile><cr>

" Source
vnoremap <leader>S y:execute @@<cr>:echo 'Sourced selection.'<cr>
nnoremap <leader>S ^vg_y:execute @@<cr>:echo 'Sourced line.'<cr>

" Redo last Ex command with bang
nnoremap <leader>! q:k0ea!<ESC>

" Write all changed buffers
nmap <leader>s :wa<CR>

" Add a semi-colon at the end of the line
inoremap <space>, <C-o>A;<esc>

" Remove search highlighting
nnoremap <esc><esc> :set hlsearch!<CR>

" Reload vimrc
map <F5> :source $MYVIMRC<CR>:echoe "Vimrc Reloaded"<CR>

" Escape remapping
vno v <esc>

" Toggle tagbar
nmap <leader>d :TagbarToggle<CR>

" Edit current folder
nnoremap <Leader>n :e <C-R>=expand('%:p:h') . '/'<CR>

" More edit commands
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>
map <leader>ew :e %%
map <leader>es :sp %%
map <leader>ev :vsp %%
map <leader>et :tabe %%

" Jump list
nnoremap <leader>, :jump<CR>

" Make D behave
nnoremap D d$


" Keyboard shortcuts with dependencies {{{

" Word processing
nnoremap <leader>W :call WordProcessingToggle()<CR>

" Formatting for lazy people
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" Stop completion with enter, in addition to default ctrl+y
imap <expr> <CR> pumvisible() ? "\<c-y>" : "<Plug>delimitMateCR"

" A few common cmus commands
nnoremap <leader>mn :call cmus:next()<cr>
nnoremap <leader>mp :call cmus:previous()<cr>
nnoremap <leader>m<space> :call cmus:pause()<cr>
nnoremap <leader>m<return> :call cmus:play()<cr>
nnoremap <leader>ms :call cmus:stop()<cr>

" }}}


" }}}


if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
  set t_Co=256
endif

autocmd BufNewFile,BufRead *.jade set filetype=jade

let g:ycm_autoclose_preview_window_after_completion = 1

let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

map <F11> :mksession! ~/vim_session <cr>
map <F12> :source ~/vim_session <cr>

"create line break when pressing enter
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

let g:multi_cursor_use_default_mapping = 0
let g:multi_cursor_next_key = '<D-d>'
let g:multi_cursor_prev_key = '<D-u>'
let g:multi_cursor_skip_key = '<D-k>' "until we got multiple keys support
let g:multi_cursor_quit_key = '<Esc>'

" MyNext() and MyPrev(): Movement between tabs OR buffers
function! MyNext()
    if exists( '*tabpagenr' ) && tabpagenr('$') != 1
        " Tab support && tabs open
        normal gt
    else
        " No tab support, or no tabs open
        execute ":bnext"
    endif
endfunction
function! MyPrev()
    if exists( '*tabpagenr' ) && tabpagenr('$') != '1'
        " Tab support && tabs open
        normal gT
    else
        " No tab support, or no tabs open
        execute ":bprev"
    endif
endfunction

nnoremap <leader>¨ :call ReverseBackground()<CR>
function! ReverseBackground()
  exec ':let &bg = ( &bg == "dark" ? "light" : "dark" )'
  hi vertsplit guifg=bg guibg=bg
  hi NonText guifg=bg guibg=bg
  exec ':redraw!'
endfunction

" WordProcessingToggle() {{{
function! WordProcessingToggle()
    if !exists('b:wordprocessing') || b:wordprocessing
        let b:wordprocessing = 'true'
        setlocal lbr ai
        setlocal tw=80
        setlocal fo-=cq fo+=tan1
        echo "Word processing mode enabled."
    else
        let b:wordprocessing = 'false'
        setlocal nolbr noai
        setlocal fo+=cq fo-=tan1
        echo "Word processing mode disabled."
    endif
endfunction

let g:nerdtree_tabs_open_on_gui_startup = 0
let g:NERDTreeWinSize = 40
let NERDTreeShowBookmarks=1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeQuitOnOpen = 1

call togglebg#map("<F6>")

function! s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END
set numberwidth=4
autocmd FileType nerdtree setlocal norelativenumber
autocmd FileType taglist setlocal norelativenumber
autocmd FileType tagbar setlocal norelativenumber
autocmd FileType tagbar setlocal nonumber

" Highlight all instances of word under cursor, when idle.
" nnoremap <leader>h :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=300
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

" Tagbar settings
let g:tagbar_compact = 1

" Conque settings
let g:ConqueTerm_Color = 1

" Clean up GUI
hi vertsplit guifg=bg guibg=bg
hi NonText guifg=bg guibg=bg

" Trim trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

autocmd FileType latex,tex,c,cpp,java,ruby,python,haskell autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()
filetype off
filetype on
