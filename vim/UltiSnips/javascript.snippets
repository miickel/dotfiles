priority -50

# Gulp snippets

snippet gt "Gulp Task"
gulp.task('${1:name}'${2:, ['$3']}, () => {
	${4:return gulp.src('$5')}$0
});
endsnippet

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': (element) => {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: (${3:attribute}) => {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = (${3:first_argument}) => {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fn "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet => "arrow function"
${2:argument} => {
	${VISUAL}$0
}
endsnippet

snippet sjsx "styled jsx"
<style jsx>{\`
	${VISUAL}$0
\`}</style>
endsnippet

snippet r "require('...')"
const $1 = require('${2:$1}')
endsnippet

snippet rfac "require('...')"
var $1 = React.createFactory(require('${2:$1}'));
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
((${1:argument}) => {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ife "if ___ else"
if (${1:condition}) {
	${2://code}
}
else {
	${3://code}
}
endsnippet

snippet ii "if inline"
if (${1:condition}) ${VISUAL}$0;
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet timeout "setTimeout function"
setTimeout(() => {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:'${3:message}'});
endsnippet

snippet cj "console JSON" b
console.log(JSON.stringify($1, null, 2))
endsnippet

snippet cclear "console.clear" b
console.clear()
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group('${1:label}');
${VISUAL}$0
console.groupEnd()
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed('${1:label}');
${VISUAL}$0
console.groupEnd()
endsnippet

snippet ci "console.info" b
console.info(${1:'${2:value}'})
endsnippet

snippet cl "console.log" b
console.log(${1:'${2:value}'})
endsnippet

snippet cd "console.debug" b
console.debug(${1:'${2:value}'})
endsnippet

snippet cprof "console.profile" b
console.profile('${1:label}')
${VISUAL}$0
console.profileEnd()
endsnippet

snippet ctable "console.table" b
console.table(${1:'${2:value}'})
endsnippet

snippet ctime "console.time" b
console.time('${1:label}')
${VISUAL}$0
console.timeEnd('$1')
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp('${1:label}')
endsnippet

snippet ctrace "console.trace" b
console.trace()
endsnippet

snippet cw "console.warn" b
console.warn(${1:'${2:value}'});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

snippet foreach "forEach"
${1:things}.forEach((${2:item}) => {
  $3
});
endsnippet

snippet mo "module.exports"
module.exports = {

  ${VISUAL}$0

};
endsnippet

snippet mf "module.exports"
module.exports = function (${1:req, res, next}) {

  ${2:return {
    $3
  };}

};
endsnippet

snippet try "try catch"
try {
  ${VISUAL}$0
} catch (e) {
  $1
}
endsnippet

snippet c "const"
const $1 = ${VISUAL}$0
endsnippet

snippet v "var"
var $1 = ${VISUAL}$0;
endsnippet

# Mocha test

snippet d "test suite"
describe('$1', () => {
  ${VISUAL}$0
});
endsnippet

snippet before "before"
before((done) => {
  ${VISUAL}$0
});
endsnippet

snippet after "after"
after((done) => {
  ${VISUAL}$0
});
endsnippet

snippet it "test case"
it('should $1', (${2:done}) => {
  $3
});
endsnippet

snippet mm "mongoose model"
var $1 = mongoose.model('${2:$1}');
endsnippet

snippet am "angular module"
(function () {
  'use strict';

  angular.module('${1:name}', [

  ${VISUAL}$0

  ]);

})()
endsnippet

snippet ac "angular controller"
(function () {
  'use strict';

  angular
    .module('${1:module}')
    .controller('${2:name}', ${3:$2});

  /* @ngInject */
  function $3() {
    var vm = this;$0
  }

})()
endsnippet

snippet ar "angular route"
(function () {
  'use strict';

  angular
    .module('${1:module}')
    .run(appRun);

  /* @ngInject */
  function appRun(routehelper) {
    routehelper.configureRoutes(getRoutes());
  }

  function getRoutes() {
    return [{
      url: '/${2:name}',
      config: {
        templateUrl: '$2/$2.index.html',
        controller: '${3:$2}',
        controllerAs: 'vm',
        title: '${4:$2}',
        settings: {
        nav: '${5:/$2}'
        }
      }
    }];
  }
})()
endsnippet

snippet af "angular factory"
(function () {
  'use strict';

  angular
    .module('${1:module}')
    .factory('$2', ${3:$2});

  /* @ngInject */
  function $3() {
    $0
  }

})()
endsnippet

snippet ad "angular DS factory"
(function () {
  'use strict';

  angular
    .module('${1:module}')
    .factory($2);

  /* @ngInject */
  function $2(DS) {
    return DS.defineResource('${3:$2}');
  }

})()
endsnippet

snippet cc "ml comment"
/**
 * $1
 */
$0
endsnippet

snippet mmm "create mongoose model"
var mongoose = require('mongoose');

var schema = new mongoose.Schema({

  $0

});

mongoose.model('${1:name}', schema);
endsnippet

snippet in "for ... in"
for (var ${1:key} in ${2:$1s}) {
  $0
}
endsnippet

snippet as "Angular state"
(function () {
  'use strict';

  angular
    .module('${1:module}')
    .config($2);

  /* @ngInject */
  function $2($stateProvider) {
    $stateProvider

    .state('${3:app.state}', {
      url: '/${4:url}',
      views: {
        mainContent: {
          templateUrl: '$5/$5.index.html',
          controller: '${6:$5} as vm'
        }
      }
    });$0

  }

})()
endsnippet


snippet rc "React class component"
import React, { Component } from 'react'

class $1 extends Component {
  render() {
    return (
      <div>
        $1
      </div>
    )
  }
}

export { $1 }
endsnippet

snippet rcc "React Redux-connected class"
import { connect } from 'react-redux'
import { $1 } from './$1.js'

const mapStateToProps = state => ({
})

const mapDispatchToProps = dispatch => ({
})

const $1Container = connect(
  mapStateToProps,
  mapDispatchToProps,
)(
  class $1Container extends $1 {}
)

export { $1Container }
endsnippet

snippet rsc "React JSS styled component"
import React, { Component } from 'react'
import injectSheet from 'react-jss'
import styles from './$1.styles.js'

class $1 extends Component {

  render() {
    const { classes } = this.props

    return (
      <div>
        $1
      </div>
    )
  }

}

const Styled$1 = injectSheet(styles)($1)

export { Styled$1 as $1 }
endsnippet

snippet imp "ES6 import"
import $1 from '${2:$1}'
endsnippet

snippet class "ES6 class"
class ${1:name} {
    $2
}
endsnippet

snippet ed "ES6 export default"
export default ${1:name}
endsnippet
